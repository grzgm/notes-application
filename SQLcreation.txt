CREATE TABLE account
(
	Id int NOT NULL PRIMARY KEY IDENTITY (1, 1),
	[Name] nchar(15) NOT NULL,
	Email nchar(50) NOT NULL,
	[Password] nchar(10) NOT NULL,
	CONSTRAINT UniqueNameAndPassword_account UNIQUE ([Name], Email)
);

CREATE TABLE userTable
(
	Id int NOT NULL FOREIGN KEY REFERENCES [account]([id]) UNIQUE,
	MaxAmountOfNotes int NOT NULL,
	MaxLengthOfNote int NOT NULL
);

CREATE TABLE premiumUserTable
(
	Id int NOT NULL FOREIGN KEY REFERENCES [account]([id]) UNIQUE,
	StartPremiumDate datetime2(0) NOT NULL,
	EndPremiumDate datetime2(0) NOT NULL
);

CREATE TABLE adminTable
(
	Id int NOT NULL FOREIGN KEY REFERENCES [account]([id]) UNIQUE,
);

CREATE TABLE premiumRequests
(
	UserId int NOT NULL FOREIGN KEY REFERENCES [userTable]([id]) UNIQUE,
	Date datetime2(0) NOT NULL,
);

INSERT INTO account VALUES ('grzegorz', 'g@g', 'zaq12wsx');
INSERT INTO userTable VALUES (1, 5, 100);
INSERT INTO premiumUserTable VALUES (1, '2022-10-01 0:03:06', '2022-11-01 00:03:06');
INSERT INTO account VALUES ('jan', 'j@j', 'zaq12wsx');
INSERT INTO userTable VALUES (2, 5, 100);

-- Note Table
CREATE TABLE notes
	(
	Id int NOT NULL PRIMARY KEY IDENTITY (1, 1),
	UserId int NOT NULL FOREIGN KEY REFERENCES [account]([id]),
	Title nchar(15) NULL,
	[Text] nchar(200) NULL,
	[Date] datetime2(0) NULL,
	EditDate datetime2(0) NULL
	);

-- HistoryNote Table
CREATE TABLE historyNotes
	(
	NoteId int NOT NULL FOREIGN KEY REFERENCES [notes]([id]),
	EditId int NOT NULL,
	UserId int NOT NULL FOREIGN KEY REFERENCES [account]([id]),
	Title nchar(15) NULL,
	[Text] nchar(100) NULL,
	[Date] datetime2(0) NULL,
    	CONSTRAINT PK_historyNotes PRIMARY KEY (NoteId, EditId, UserId)
	);